<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trust the light！</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wenace.github.io/"/>
  <updated>2017-06-18T14:50:58.787Z</updated>
  <id>http://wenace.github.io/</id>
  
  <author>
    <name>心雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gamejam总结</title>
    <link href="http://wenace.github.io/2017/06/18/gamejam%E6%80%BB%E7%BB%93/"/>
    <id>http://wenace.github.io/2017/06/18/gamejam总结/</id>
    <published>2017-06-18T14:10:24.010Z</published>
    <updated>2017-06-18T14:50:58.787Z</updated>
    
    <content type="html"><![CDATA[<p>   自己首次参与gamejam结束了，总体感觉不能完全说出来，<br>看见各种新奇的idea，感觉看见另一个不曾知道的大门，审视自己，然而还有<br>很长的一段路需要走，踏实的走下去，或许就是另一种结果。</p>
<p>gamejam所提倡的就是一种纯粹的对游戏的热爱，各种新奇好玩的点子，和各开发者<br>的交流，确实不能比这个更棒的事情了，大家都在一个channel里。</p>
<p>从技术上看见基本的开发流程，api使用，美术上更是打开我所不清楚的大门。需要学习<br>的还有很多。这次活动获益良多</p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday01.jpg" alt="gamejam"></p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday02.jpg" alt="gamejam"></p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday03.jpg" alt="gamejam"></p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday04.jpg" alt="gamejam"></p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday05.jpg" alt="gamejam"></p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/gamejam/lastday06.jpg" alt="gamejam"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   自己首次参与gamejam结束了，总体感觉不能完全说出来，&lt;br&gt;看见各种新奇的idea，感觉看见另一个不曾知道的大门，审视自己，然而还有&lt;br&gt;很长的一段路需要走，踏实的走下去，或许就是另一种结果。&lt;/p&gt;
&lt;p&gt;gamejam所提倡的就是一种纯粹的对游戏的热爱，各
    
    </summary>
    
      <category term="感悟" scheme="http://wenace.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="gamejam" scheme="http://wenace.github.io/tags/gamejam/"/>
    
  </entry>
  
  <entry>
    <title>2017gamejam记录</title>
    <link href="http://wenace.github.io/2017/06/16/2017gamejam01/"/>
    <id>http://wenace.github.io/2017/06/16/2017gamejam01/</id>
    <published>2017-06-16T14:09:08.446Z</published>
    <updated>2017-06-17T12:06:12.506Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加gamejam，虽然不是以参赛者的身份，但是确感受到了不一样的东西。对于一个热爱游戏，并且希望致力于游戏开发方向的我，参加这次活动，自我感觉还是挺值的，可以认识到行业里面的人，从他们的口中，或者是制作过程中，可以去了解游戏制作的过程，何乐而不为呢。<br><a id="more"></a></p>
<h1 id="6点前"><a href="#6点前" class="headerlink" title="6点前"></a>6点前</h1><p>主持人和乐逗方面负责人的一些谈话，我觉得这里有些东西还是可以分享的，首先一款游戏的开发流程一般是这样：</p>
<p>1.立项：做什么<br>2.策划：怎么做<br>3.开发：做出来<br>4.演示：卖出去</p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/2017gamejam00.jpg" alt="2017gamejam00"></p>
<p>这是一种比较理想下的情况，更多的时候是不断的反复于前三项。</p>
<h1 id="6点"><a href="#6点" class="headerlink" title="6点"></a>6点</h1><p>主题揭开，此次的主题很有意思，如下:</p>
<p><img src="http://ormm8jbub.bkt.clouddn.com/2017gamejam_theme.jpg" alt="2017gamejamthem"></p>
<p>是一颗树，从根部到树干都很完整的一棵树，作为吃瓜群众的我，首先映入脑海的就是要有寓意，这次出这个题，玩法上应该需要偏轻松些，但是寓意要强。</p>
<p>试想下，自己要做应该做成什么样子，我大概也想了想，也有那么几套方案吧。以文字代替集中在时间轮回，小孩，暗与光。这几个题材上。</p>
<p>玩法上会偏休闲，一笔画，简单数字解谜，都是可以的。自己也和现场小伙伴有些交流，感觉都很棒，接下来两天就看他们怎么开始了，明天继续去学习观摩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次参加gamejam，虽然不是以参赛者的身份，但是确感受到了不一样的东西。对于一个热爱游戏，并且希望致力于游戏开发方向的我，参加这次活动，自我感觉还是挺值的，可以认识到行业里面的人，从他们的口中，或者是制作过程中，可以去了解游戏制作的过程，何乐而不为呢。&lt;br&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://wenace.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="2017gamejam" scheme="http://wenace.github.io/tags/2017gamejam/"/>
    
      <category term="游戏开发" scheme="http://wenace.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>hexo重新部署的注意点</title>
    <link href="http://wenace.github.io/2017/06/15/hexo%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://wenace.github.io/2017/06/15/hexo重新部署的注意点/</id>
    <published>2017-06-15T13:28:40.000Z</published>
    <updated>2017-06-16T03:17:36.428Z</updated>
    
    <content type="html"><![CDATA[<p>作为博客，hexo在本地弄好之后是相对方便的，然后偶尔的重装或者换电脑的时候，我们应该怎么样来进行重新部署呢。<a id="more"></a></p>
<p>1.一般情况下，一些朋友的是还在硬盘上，而一些朋友的可能只能从github上仓库下载下来</p>
<p>2.开始之前，我建议大家使用cnpm，npm有时候会抽风（ps：国内）,下面的内容也是使用cnpm进行对module进行安装.</p>
<p><strong>源文件从github下载</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">graph TB</div><div class="line">A[github进行源文件clone]--&gt;B[对本文件进行gitbash]</div><div class="line">B[对本文件进行gitbash]--&gt;C[cnpm install hexo]</div><div class="line">C[cnpm install hexo]--&gt;D[cnpm install hexo server]</div></pre></td></tr></table></figure>
<p>如果源文件依旧在本地，将node_modules删除，然后进行如github下载的步骤.</p>
<p><strong>注意点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">graph TB</div><div class="line">A[hexo无法正常使用]--&gt;B[hexo server没有安装]</div><div class="line">A[hexo无法正常使用]--&gt;C[hexo deploy无法使用]</div><div class="line">A[hexo无法正常使用]--&gt;D[hexo无法识别]</div><div class="line"></div><div class="line">B[hexo server没有安装]--&gt;E[cnpm install hexo server]</div><div class="line"></div><div class="line">C[hexo deploy无法使用]--&gt;F[cnpm install hexo-deployer-git -save]</div><div class="line"></div><div class="line">D[hexo无法识别]--&gt;G[SSH重新配置]</div></pre></td></tr></table></figure>
<p>以下是对SSH重新配置</p>
<p>1.在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</p>
<blockquote>
<p>ls -al ~/.ssh</p>
</blockquote>
<p>2.如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件,位置应该在我的文档的用户文件夹中.</p>
<p>3.输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：</p>
<blockquote>
<p>ssh-keygen -t rsa -C “XXXXX@XX.com”</p>
</blockquote>
<p>4.然后它会提示要你输入passphrase,这个时候不需要输入任何数据，直接一路回车.</p>
<p>5.成功之后键入：</p>
<blockquote>
<p>ssh-agent -s</p>
</blockquote>
<p>6.这一步有可能会出现”Could you open..”的错误信息</p>
<blockquote>
<p>ssh-add ~/.ssh/id_rsa</p>
</blockquote>
<p>这个时候你需要键入以下命令</p>
<blockquote>
<p>eval <code>ssh-agent -s</code></p>
</blockquote>
<p>成功后键入</p>
<blockquote>
<p>ssh-add</p>
</blockquote>
<p>7.到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>
<blockquote>
<p>clip &lt; ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>8.添加SSH至github，这里就不赘述了，网上有很多教程.</p>
<p>9.之后可以测试下,输入以下命令，如果出现警告，输入yes就行</p>
<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为博客，hexo在本地弄好之后是相对方便的，然后偶尔的重装或者换电脑的时候，我们应该怎么样来进行重新部署呢。
    
    </summary>
    
    
      <category term="hexo" scheme="http://wenace.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>位运算总结</title>
    <link href="http://wenace.github.io/2017/06/10/CodeFight%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    <id>http://wenace.github.io/2017/06/10/CodeFight经典问题/</id>
    <published>2017-06-10T01:16:55.052Z</published>
    <updated>2017-06-15T12:18:24.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位运算形式"><a href="#位运算形式" class="headerlink" title="位运算形式"></a>位运算形式</h2><p>1.与，或，非，异或运算特点<br>非（~）：1变0,0变1.<br>与（&amp;）：有0则为0，均为1返回1.<a id="more"></a><br>或（|）：均为0返回0，有1为1.<br>异或（^）：均为1或者0，均返回0.只有一个1返回1.  (x^y)&gt;=0 true为相同符号，false为不同符号</p>
<p>2.左移和右移<br>左（&lt;&lt;）: n&lt;<1 表示n乘以2，="" x+y="">&gt;1 两数相加平均数<br>右（&gt;&gt;）：n&gt;&gt;1 表示n除以2</1></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;位运算形式&quot;&gt;&lt;a href=&quot;#位运算形式&quot; class=&quot;headerlink&quot; title=&quot;位运算形式&quot;&gt;&lt;/a&gt;位运算形式&lt;/h2&gt;&lt;p&gt;1.与，或，非，异或运算特点&lt;br&gt;非（~）：1变0,0变1.&lt;br&gt;与（&amp;amp;）：有0则为0，均为1返回1.
    
    </summary>
    
    
      <category term="位运算" scheme="http://wenace.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>前端开发总结(持续更新)</title>
    <link href="http://wenace.github.io/2016/06/18/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://wenace.github.io/2016/06/18/前端总结/</id>
    <published>2016-06-18T06:11:40.758Z</published>
    <updated>2017-06-15T12:24:31.594Z</updated>
    
    <content type="html"><![CDATA[<p>1.清除浮动</p>
<p><em>此清除浮动可作为初始化的基本样式</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.clearfloat&#123;</div><div class="line">	zoom:1</div><div class="line">&#125;</div><div class="line">.clerarfloat:after&#123;</div><div class="line">	display:block;</div><div class="line">	clear:both;</div><div class="line">	content:<span class="string">""</span>;</div><div class="line">	visibility:hidden;</div><div class="line">	height:0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>cookie,localStorage,sessionStorage区别</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.cookie 是客户端保持状态方案。在浏览器和服务器间来回传递。</div><div class="line">2.sessionStorage和localStorage不会再浏览器和服务器间来回传递。</div><div class="line">3.sessionStorage和localStorage的存储空间大并且各自有独立的存储空间。</div><div class="line">4.更多丰富易用的接口。</div></pre></td></tr></table></figure>
<p>3.当需要声明变量的时候，记得使用var，不要漏写，虽然JavaScript同意可以不使用var来声明变量，但是这容易造成变量的混乱，当不使用var声明变量，变量为一个全局变量。我们应该尽量避免全局变量。</p>
<p>4.清空一个数组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3];</div><div class="line">arr.length=0;</div></pre></td></tr></table></figure>
<p>5.将arguments对象转换成数组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr=Array.prototype.slice.call(arguments);</div></pre></td></tr></table></figure>
<p>slice.call()是把arguments对象数组提取出来转换成数组。</p>
<p>6.call()和apply()区别<br>call(thisObj,Object)参数为object<br>apply(thisObj,[arrArray])参数为arguments对象或者数组</p>
<p>7.变量声明提升拆分两个部分，一为声明，一位赋值。提升是吧声明提升，赋值留在原地。</p>
<p>javascript中一个名字(name)以四种方式进入作用域(scope)，其优先级顺序如下：<br>1、语言内置：所有的作用域中都有 this 和 arguments 关键字<br>2、形式参数：函数的参数在函数作用域中都是有效的<br>3、函数声明：形如function foo() {}<br>4、变量声明：形如var bar;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.清除浮动&lt;/p&gt;
&lt;p&gt;&lt;em&gt;此清除浮动可作为初始化的基本样式&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.clearfloat&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	zoom:1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.clerarfloat:after&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	display:block;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	clear:both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	content:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	visibility:hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	height:0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="浮动" scheme="http://wenace.github.io/tags/%E6%B5%AE%E5%8A%A8/"/>
    
      <category term="数组" scheme="http://wenace.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="面试常见" scheme="http://wenace.github.io/tags/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>常用正则收集</title>
    <link href="http://wenace.github.io/2016/06/11/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://wenace.github.io/2016/06/11/常用正则表达式/</id>
    <published>2016-06-11T03:43:59.438Z</published>
    <updated>2017-06-15T12:24:31.918Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用的正则表达式<a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">//正整数</div><div class="line">/^[0-9]*[1-9][0-9]*$/;</div><div class="line"></div><div class="line">//负整数</div><div class="line">/^-[0-9]*[1-9][0-9]*$/;</div><div class="line"></div><div class="line">//正浮点数</div><div class="line">/^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$/;</div><div class="line"></div><div class="line">//负浮点数</div><div class="line">/^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;  </div><div class="line"></div><div class="line">//浮点数</div><div class="line">/^(-?\d+)(\.\d+)?$/;</div><div class="line"></div><div class="line">//email地址</div><div class="line">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/;</div><div class="line"></div><div class="line">//url地址</div><div class="line">/^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$/;</div><div class="line">或：^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~`@[\]\<span class="string">':+!]*([^&lt;&gt;\"\"])*$ </span></div><div class="line"></div><div class="line">//年/月/日（年-月-日、年.月.日）</div><div class="line">/^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/;</div><div class="line"></div><div class="line">//匹配中文字符</div><div class="line">/[\u4e00-\u9fa5]/;</div><div class="line"></div><div class="line">//匹配账号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</div><div class="line">/^[a-zA-Z][a-zA-Z0-9_]&#123;4,9&#125;$/;</div><div class="line"></div><div class="line">//匹配空白行的正则表达式</div><div class="line">/\n\s*\r/;</div><div class="line"></div><div class="line">//匹配中国邮政编码</div><div class="line">/[1-9]\d&#123;5&#125;(?!\d)/;</div><div class="line"></div><div class="line">//匹配身份证</div><div class="line">/\d&#123;15&#125;|\d&#123;18&#125;/;</div><div class="line"></div><div class="line">//匹配国内电话号码</div><div class="line">/(\d&#123;3&#125;-|\d&#123;4&#125;-)?(\d&#123;8&#125;|\d&#123;7&#125;)?/;</div><div class="line"></div><div class="line">//匹配IP地址</div><div class="line">/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)/;</div><div class="line"></div><div class="line">//匹配首尾空白字符</div><div class="line">/^\s*|\s*$/;</div><div class="line"></div><div class="line">//匹配HTML标记</div><div class="line">&lt; (\S*?)[^&gt;]*&gt;.*?|&lt; .*? /&gt;;</div><div class="line"></div><div class="line">//提取信息中的网络链接</div><div class="line">(h|H)(r|R)(e|E)(f|F) *=*('|<span class="string">")?(\w|\\|\/|\.)+('|"</span>| *|&gt;)?</div><div class="line"></div><div class="line">//提取信息中的邮件地址</div><div class="line">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* </div><div class="line"></div><div class="line">//提取信息中的图片链接</div><div class="line">(s|S)(r|R)(c|C) *= *(<span class="string">'|")?(\w|\\|\/|\.)+('</span>|<span class="string">"| *|&gt;)? </span></div><div class="line"></div><div class="line">//提取信息中的 IP 地址</div><div class="line">(\d+)\.(\d+)\.(\d+)\.(\d+)</div><div class="line"></div><div class="line">//取信息中的中国手机号码</div><div class="line">(86)*0*13\d&#123;9&#125; </div><div class="line"></div><div class="line">//提取信息中的中国邮政编码</div><div class="line">[1-9]&#123;1&#125;(\d+)&#123;5&#125; </div><div class="line"></div><div class="line">//提取信息中的浮点数（即小数）</div><div class="line">(-?\d*)\.?\d+ </div><div class="line"></div><div class="line">//提取信息中的任何数字</div><div class="line">(-?\d*)(\.\d+)?</div><div class="line"></div><div class="line">//电话区号</div><div class="line">^0\d&#123;2,3&#125;$</div><div class="line"></div><div class="line">//腾讯 QQ 号</div><div class="line">^[1-9]*[1-9][0-9]*$ </div><div class="line"></div><div class="line">//帐号（字母开头，允许 5-16 字节，允许字母数字下划线）</div><div class="line">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </div><div class="line"></div><div class="line">//中文、英文、数字及下划线</div><div class="line">^[\u4e00-\u9fa5_a-zA-Z0-9]+$</div></pre></td></tr></table></figure></p>
<p>这里推荐一个<a href="http://www1.w3cfuns.com/tools.php?mod=regex" target="_blank" rel="external">正则表达式的调试工具</a><br>也可以看看<a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="external">正则的基本语法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用的正则表达式
    
    </summary>
    
    
      <category term="正则" scheme="http://wenace.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>http相关缓存头</title>
    <link href="http://wenace.github.io/2016/06/10/http%E7%9B%B8%E5%85%B3%E7%BC%93%E5%AD%98%E5%A4%B4%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://wenace.github.io/2016/06/10/http相关缓存头信息收集/</id>
    <published>2016-06-10T08:14:33.762Z</published>
    <updated>2017-06-15T12:24:32.026Z</updated>
    
    <content type="html"><![CDATA[<p>http中分请求头和响应头两种。</p>
<blockquote>
<p>请求头是浏览器向服务器发送请求的数据和资源.<br>响应头是服务器向浏览器响应的数据。</p>
</blockquote>
<p>##常见的请求头：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Accept: text/html,image/*                                        浏览器可以接收的类型 </div><div class="line">Accept-Charset: ISO-8859-1                                   	 浏览器可以接收的编码类型</div><div class="line">Accept-Encoding: gzip,compress                               	 浏览器可以接收压缩编码类型 </div><div class="line">Accept-Language: en-us,zh-cn                                 	 浏览器可以接收的语言和国家类型</div><div class="line">Host: www.lks.cn:80                                          	 浏览器请求的主机和端口</div><div class="line">If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT   			 	 某个页面缓存时间 </div><div class="line">Referer: http://www.lks.cn/index.html                        	 请求来自于哪个页面</div><div class="line">User-Agent: Mozilla/4.0 compatible; MSIE 5.5; Windows NT 5.0   	 浏览器相关信息</div><div class="line">Cookie：                                                         浏览器暂存服务器发送的信息</div><div class="line">Connection: close1.0/Keep-Alive1.1                               HTTP请求的版本的特点</div><div class="line">Date: Tue, 11 Jul 2000 18:23:51GMT                               请求网站的时间</div><div class="line">Allow:GET                                                        请求的方法 GET 常见的还有POST</div><div class="line">Keep-Alive：5                                                    连接的时间；5</div><div class="line">Connection：keep-alive                                           是否是长连接</div><div class="line">Cache-Control：max-age=300                                       缓存的最长时间 300s</div></pre></td></tr></table></figure></p>
<p>##常见的响应头</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Location: http://www.lks.cn/index.html                           控制浏览器显示哪个页面 </div><div class="line">Server:apache nginx                                              服务器的类型 </div><div class="line">Content-Encoding: gzip                                           服务器发送的压缩编码方式 </div><div class="line">Content-Length: 80                                               服务器发送显示的字节码长度 </div><div class="line">Content-Language: zh-cn                                          服务器发送内容的语言和国家名 </div><div class="line">Content-Type: image/jpeg; charset=UTF-8                 		 服务器发送内容的类型和编码类型 </div><div class="line">Last-Modified: Tue, 11 Jul 2000 18:23:51GMT           			 服务器最后一次修改的时间 </div><div class="line">Refresh: 1;url=http://www.lks.cn                                 控制浏览器1秒钟后转发URL所指向的页面 </div><div class="line">Content-Disposition: attachment; filename=lks.jpg      			 服务器控制浏览器发下载方式打开文件 </div><div class="line">Transfer-Encoding: chunked                                       服务器分块传递数据到客户端  </div><div class="line">Set-Cookie:SS=Q0=5Lb_nQ; path=/search                	  服务器发送Cookie相关的信息 </div><div class="line">Expires: -1                                               资源的过期时间，提供给浏览器缓存数据,-1永远过期 </div><div class="line">Cache-Control: no-cache                                   告诉浏览器,定要回服务器校验,不管有没有缓存数据。 </div><div class="line">Pragma: no-cache                                          服务器控制浏览器不要缓存网页   </div><div class="line">Connection: close/Keep-AliveHTTP                          请求的版本的特点   </div><div class="line">Date: Tue, 11 Jul 2000 18:23:51 GMT                       响应网站的时间 </div><div class="line">ETag：“ihfdgkdgnp98hdfg”                                  资源实体的标识(唯一标识，类似md5值，文件有修改md5就不一样)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http中分请求头和响应头两种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请求头是浏览器向服务器发送请求的数据和资源.&lt;br&gt;响应头是服务器向浏览器响应的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##常见的请求头：&lt;br&gt;
    
    </summary>
    
    
      <category term="网络相关" scheme="http://wenace.github.io/tags/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="http" scheme="http://wenace.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript编写ajax</title>
    <link href="http://wenace.github.io/2016/06/10/ajax%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://wenace.github.io/2016/06/10/ajax学习总结/</id>
    <published>2016-06-10T00:42:56.259Z</published>
    <updated>2017-06-15T12:24:31.967Z</updated>
    
    <content type="html"><![CDATA[<p>ajax全程是异步的JavaScript和xml，作用为可局部刷新网页，无需重新加载整个网页，大大的提升了用户的交互性</p>
<p>ajax是一种用于创建快速动态网页的技术<br><em>AJAX应用程序与浏览器和平台无关</em><br><a id="more"></a><br>下面是一个JavaScript原生ajax创建对象方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">createXMLDoc</span></span>()&#123;</div><div class="line">	var xmlhttp;</div><div class="line">	<span class="keyword">if</span>(window.XMLHttpRequest)</div><div class="line">	&#123;</div><div class="line">		xmlhttp=new XMLHttpRequest();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">	&#125;</div><div class="line">	xmlhttp.onreadystatechange=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		<span class="keyword">if</span>(xmlhttp.states==200&amp;&amp;xmlhttp.readyState==4)</div><div class="line">		&#123;</div><div class="line">			document.getElementById(<span class="string">"myDic"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>):</div><div class="line">	xmlhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><h3 id="open-和send-的方法"><a href="#open-和send-的方法" class="headerlink" title="open()和send()的方法"></a>open()和send()的方法</h3><p>open方法中有三个参数，从左往右分别是</p>
<ul>
<li>method：请求类型：GET或者POST</li>
<li>url：文件在服务器上的位置</li>
<li>async: true()（异步）或false()（同步）<br><em>url中文件可以使任何类型的文件</em></li>
</ul>
<p>send()方法中的参数仅用于POST请求。</p>
<h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><p>GET：<br>1.一般用于信息获取<br>2.使用URL传递参数<br>3.对所发送信息的数量有限制，一般在2000个字符<br>4.传送数据量小，处理效率高。<br>5.安全性低，会被缓存。</p>
<p>POST：<br>1.用于修改服务器上的资源。<br>2.对所发送信息的数量无限制。<br>3.安全性高。可靠性高。</p>
<h2 id="AJAX的服务器响应"><a href="#AJAX的服务器响应" class="headerlink" title="AJAX的服务器响应"></a>AJAX的服务器响应</h2><ul>
<li>responseTest 获得字符串响应数据</li>
<li>responseXML  或的XML形式响应数据</li>
</ul>
<p>##AJAX的readyState和status</p>
<p>readyState：</p>
<blockquote>
<p>0：请求未初始化<br>1：服务器连接已建立<br>2：请求已接收<br>3：请求处理中<br>4：请求已经完成，且响应已就绪</p>
</blockquote>
<p>Status：</p>
<blockquote>
<p>200：ok<br>404：未找到页面</p>
</blockquote>
<h4 id="HTTP请求中常用的状态码"><a href="#HTTP请求中常用的状态码" class="headerlink" title="HTTP请求中常用的状态码"></a>HTTP请求中常用的状态码</h4><blockquote>
<p>301,302 重定向，后跟location头指明跳转位置<br>304 从浏览器缓存加载<br>403 权限不够，拒绝访问<br>404 资源未找到<br>500 服务器内部错误，通常为后端错误</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ajax全程是异步的JavaScript和xml，作用为可局部刷新网页，无需重新加载整个网页，大大的提升了用户的交互性&lt;/p&gt;
&lt;p&gt;ajax是一种用于创建快速动态网页的技术&lt;br&gt;&lt;em&gt;AJAX应用程序与浏览器和平台无关&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="http://wenace.github.io/tags/ajax/"/>
    
      <category term="前端" scheme="http://wenace.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>常见的JavaScript遍历方式</title>
    <link href="http://wenace.github.io/2016/06/07/JavaScript%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://wenace.github.io/2016/06/07/JavaScript的遍历方式/</id>
    <published>2016-06-07T12:11:08.110Z</published>
    <updated>2017-06-15T12:24:31.952Z</updated>
    
    <content type="html"><![CDATA[<p> 首先我们写一个数组和json对象。<br> var Arr=[‘C++’,’c#’,’java’,’css’,’html’,’javascripts’];<br> var obj={<br>     first:’javascripts’,<br>     second:’css’,<br>     third:’jquery’<br> };<br><a id="more"></a></p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span>&#123;</div><div class="line">	<span class="keyword">for</span>(var i=0,len=Arr.length;i&lt;len;i++)&#123;</div><div class="line">	<span class="keyword">if</span>(i==2)&#123;</div><div class="line">		//<span class="built_in">return</span>;  //函数执行被终止</div><div class="line">		//<span class="built_in">break</span>;   //循环被终止</div><div class="line">		<span class="built_in">continue</span>;  //循环被跳过</div><div class="line">	&#125;</div><div class="line">	console.log(<span class="string">'Arr['</span>+i+<span class="string">']:'</span>+Arr[i]);</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="for循环中有两点注意"><a href="#for循环中有两点注意" class="headerlink" title="for循环中有两点注意"></a>for循环中有两点注意</h3><ul>
<li>for循环中的i在循环结束后依然存在与作用域中，这个时候为了避免影响作用域中的其余变量，我们将采用函数自执行的方式将其隔离起来。形如</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（<span class="function"><span class="title">function</span></span>()&#123;&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>在循环中避免使用（var i=0;i&lt;Arr.length;）这样数组长度每次都在计算，效率远远低于例子中的写法，同理，我们也可以先赋值好值，如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var i=0;len=Arr.length;</div><div class="line"><span class="keyword">for</span>(;i&lt;len;i++)</div></pre></td></tr></table></figure>
<h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for in 循环"></a>for in 循环</h2><p>for(var item in arr|obj){}可以用于遍历数组和对象</p>
<ul>
<li>遍历数组，item为索引值，arr为当前索引值对应的元素 arr[item];</li>
<li>遍历对象，item为key值，arr表示key值对应的value值obj[item];</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span>&#123;</div><div class="line">	<span class="keyword">for</span>(var i <span class="keyword">in</span> Arr)&#123;</div><div class="line">	<span class="keyword">if</span>(i==2)&#123;</div><div class="line">		//<span class="built_in">return</span>;  //函数执行被终止</div><div class="line">		//<span class="built_in">break</span>;   //循环被终止</div><div class="line">		<span class="built_in">continue</span>;  //循环被跳过</div><div class="line">	&#125;</div><div class="line">	console.log(<span class="string">'Arr['</span>+i+<span class="string">']:'</span>+Arr[i]);</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="关于for-in-的注意"><a href="#关于for-in-的注意" class="headerlink" title="关于for in 的注意"></a>关于for in 的注意</h3><ul>
<li>同样式需要添加自执行函数。</li>
<li>跳出循环中，return为函数执行终止，即整个函数将终止，在循环外面的也不再进行。break为终止当前的循环，后续代码继续执行。</li>
</ul>
<h2 id="for-Each"><a href="#for-Each" class="headerlink" title="for Each"></a>for Each</h2><p>Arr.forEach(function(arg){})<br>参数arg为数组没一项元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Arr.forEach(funciton(val,index)&#123;</div><div class="line">	<span class="keyword">if</span>(e==<span class="string">'css3'</span>)&#123;</div><div class="line">		<span class="built_in">return</span>;  //循环被跳过</div><div class="line">		//<span class="built_in">break</span>;   //Error</div><div class="line">		//<span class="built_in">continue</span>;  //Error</div><div class="line">	&#125;</div><div class="line">	console.log(val,index);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="for-Each注意点"><a href="#for-Each注意点" class="headerlink" title="for Each注意点"></a>for Each注意点</h3><ul>
<li>回调函数中的2参数分别为值和索引值，和jQuery的$.each相反。</li>
<li><em>forEach无法遍历对象</em>.</li>
<li>forEach无法再IE中使用</li>
<li>forEach无法使用break和continue，而return和for循环中的continue一致。</li>
<li>可添加第二个参数，为一个数组，在回调中用this指向这个数组，若无第二参数，则this会指向window。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var newArr[];</div><div class="line">Arr.forEach(<span class="keyword">function</span>(val,index)&#123;</div><div class="line">	this.push(val); //this指向newArr.</div><div class="line">&#125;,newArr)</div></pre></td></tr></table></figure>
<h3 id="do-while方式"><a href="#do-while方式" class="headerlink" title="do/while方式"></a>do/while方式</h3><p>不建议使用，此处不多说明</p>
<h2 id="each"><a href="#each" class="headerlink" title="$.each"></a>$.each</h2><p>这个为jQuery中的方法，熟悉jQuery的应该或多或少的使用过。可遍历数组和对象。<br>下面的例子中e为索引值，或者key值，ele为value值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.each(Arr|obj,<span class="keyword">function</span>(e,ele)&#123;</div><div class="line">	console.log(e,ele);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="each注意点"><a href="#each注意点" class="headerlink" title="$.each注意点"></a>$.each注意点</h3><ul>
<li>使用return或return true为跳过一次循环，继续执行后面的循环。</li>
<li>使用return false为终止循环的执行，但是并不终止函数执行，</li>
<li>无法使用break和continue来跳过循环。</li>
<li>循环中this输出： </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(this);</div><div class="line"></div><div class="line">console.log(this=ele);</div></pre></td></tr></table></figure>
<h2 id="selecter-each"><a href="#selecter-each" class="headerlink" title="$(selecter).each()"></a>$(selecter).each()</h2><p>专门用来遍历DOMList</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.list li'</span>).each(<span class="keyword">function</span>(i,ele)&#123;</div><div class="line">	console.log(i,ele);</div><div class="line"></div><div class="line">	$(this).html(i);</div><div class="line">	<span class="keyword">if</span>($(this).attr(<span class="string">'data-item'</span>)==<span class="string">'do'</span>)&#123;</div><div class="line">	$(this).html(<span class="string">'data-item:do'</span>);</div><div class="line">	&#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>i ele 只被当前遍历DOM元素</li>
<li>this 当前被遍历的DOM元素，不能调用jQuery方法。</li>
<li>$(this)==$(ele) 当前被遍历元素的jQuery对象，可调用jQuery方法进行dom操作。</li>
</ul>
<p><em>在for循环中遍历DOMList中需要将DOMlist转换为数组</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var res=[].slice.call(domList);</div><div class="line"><span class="keyword">for</span>(var item <span class="keyword">in</span> res)&#123;&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 首先我们写一个数组和json对象。&lt;br&gt; var Arr=[‘C++’,’c#’,’java’,’css’,’html’,’javascripts’];&lt;br&gt; var obj={&lt;br&gt;     first:’javascripts’,&lt;br&gt;     second:’css’,&lt;br&gt;     third:’jquery’&lt;br&gt; };&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://wenace.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到github</title>
    <link href="http://wenace.github.io/2016/05/30/hexo%E5%BB%BA%E7%AB%99-%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <id>http://wenace.github.io/2016/05/30/hexo建站-部署到github/</id>
    <published>2016-05-30T01:58:33.439Z</published>
    <updated>2017-06-16T14:38:34.159Z</updated>
    
    <content type="html"><![CDATA[<p>昨天已经说了在本地搭建一个hexo，今天来总结下怎么把hexo部署到github上</p>
<h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h2><p>当然了，部署到github上，首先你得有个github账号，注册步骤大家可以自行的google下，不难。<br><a id="more"></a></p>
<h2 id="建立一个仓库"><a href="#建立一个仓库" class="headerlink" title="建立一个仓库"></a>建立一个仓库</h2><p>ok，这里说一下github是个好东西，新手应该好好打理自己的github，而不是做好博客就不管啦。<br>回头来看，当你注册好后，你需要建立一个仓库，具体建立仓库的办法如下<br>1.先建立一个新仓库<br><img src="http://ormm8jbub.bkt.clouddn.com/newRepo.png"><br>2.填入各项信息<br><img src="http://ormm8jbub.bkt.clouddn.com/buildRepo.png"><br>3.回到你刚建立的仓库，点击setting<br><img src="http://ormm8jbub.bkt.clouddn.com/setting.png"><br>4.滚轮至底部，寻找到如图按钮并点击<br><img src="http://ormm8jbub.bkt.clouddn.com/automaticPage.png"><br>5.进入下一页，根据自己想法填，这里设置之后就是你的首页了，最后找到如图按钮<br><img src="http://ormm8jbub.bkt.clouddn.com/continueLayout.png"><br>6.最后选择你喜欢的布局，按下如图按钮<br><img src="http://ormm8jbub.bkt.clouddn.com/publishLayout.png"></p>
<p>现在你的github博客站点已经完成，地址应该是<a href="http://xxxx.github.io/" target="_blank" rel="external">http://XXXX.github.io/</a>把xxxx改成你的博客名字就可以访问了.接下来，我们把在本地的hexo部署到github上，才算真正的成功。</p>
<h2 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h2><p>首先你需要在<em>_config.yml</em>文件中的deploy进行书写，如下格式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:WenAce/WenAce.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>设置好后，进行两个命令即可部署到github上了，如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>得到最后的提示为<em>INFO  35 files generated in 2.88 s</em>为成功<br>接着我们需要deploy就完成了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> deploy</div></pre></td></tr></table></figure>
<p>出现<em>INFO  Deploy done: git</em>,即成功。</p>
<p>当你上传之后，需要等几分钟，才有可能看到效果，耐心等待下。<br>最后说一下这里有两个会错误的点，<br>1.有朋友会出现deploy错误的情况，按照以下来做</p>
<ul>
<li>安装 npm install hexo-deployer-git –save</li>
<li>将deploy 的 type由github改为git</li>
</ul>
<p>2.插入图片不成功</p>
<ul>
<li>在source中建立images文件夹，把图片放进去</li>
<li>采用img标签进行设置即可，格式为</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"/images/publishLayout.png"</span>&gt;</div></pre></td></tr></table></figure>
<p>这样你就完成了，你的第一个在线博客完成了，接下来，我会总结一下markedown的一些语法，还有hexo上的设置问题，期待下吧(ˇˍˇ) 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天已经说了在本地搭建一个hexo，今天来总结下怎么把hexo部署到github上&lt;/p&gt;
&lt;h2 id=&quot;注册github&quot;&gt;&lt;a href=&quot;#注册github&quot; class=&quot;headerlink&quot; title=&quot;注册github&quot;&gt;&lt;/a&gt;注册github&lt;/h2&gt;&lt;p&gt;当然了，部署到github上，首先你得有个github账号，注册步骤大家可以自行的google下，不难。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://wenace.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://wenace.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo本地搭建心得</title>
    <link href="http://wenace.github.io/2016/05/29/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://wenace.github.io/2016/05/29/新的开始/</id>
    <published>2016-05-29T14:43:22.983Z</published>
    <updated>2017-06-15T13:29:22.121Z</updated>
    
    <content type="html"><![CDATA[<p>今天下定决心弄弄自己的博客了，折腾过WordPress，不过要域名的情况下还是很蛋疼，作为学生党，最后寻找到github是可以进行blog的搭建的，选择了hexo原因在于自己对Node比较熟悉点。废话不多说，看看怎么完成第一步，本地搭建hexo。</p>
<h2 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h2><p>大家可以自行在<a href="https://nodejs.org/en/" target="_blank" rel="external">Node</a>的官网上进行下载.<br>当安装完Node之后，自然会安装NPM，即包管理器。<br>之后我们就可以开始安装hexo。<br>这里希望大家安装<em>git</em>，并且学会使用<em>git</em>，对以后的工作都有很大的帮助。<br><a id="more"></a></p>
<h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><p>通过npm安装hexo，具体代码在git bash中如下，采用全局安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cil -g</div></pre></td></tr></table></figure>
<p>如果安装不成功，大家可以使用淘宝的<em>CNPM</em>进行安装，毕竟有时我们和这个世界不在一个维度上。</p>
<h4 id="CNPM上的安装方式"><a href="#CNPM上的安装方式" class="headerlink" title="CNPM上的安装方式"></a>CNPM上的安装方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install hexo</div></pre></td></tr></table></figure>
<p>安装成功后，我们需要建立新的文件夹，大家可以自己选个位置，然后git bash。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init yourfolderName</div></pre></td></tr></table></figure>
<p>当初始化成功之后，可以见到这么如下所示信息<br><em>INFO Start blogging with Hexo!</em></p>
<p>因为hexo 3.0后server分开成独立模块，所以这个时候，我们需要先进行server的安装，在你博客文件夹下git bash，键入命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo server</div></pre></td></tr></table></figure>
<p>激动人心的时刻到了，安装完后，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>我们将会获得如下信息提示。<br><em>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.</em></p>
<p>可能有朋友会没有反应，原因可能是端口冲突了，你只需要在文件下的<em>node_modules</em>中的<em>hexo-server</em>的<em>index.js</em>修改port的值即可。</p>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天下定决心弄弄自己的博客了，折腾过WordPress，不过要域名的情况下还是很蛋疼，作为学生党，最后寻找到github是可以进行blog的搭建的，选择了hexo原因在于自己对Node比较熟悉点。废话不多说，看看怎么完成第一步，本地搭建hexo。&lt;/p&gt;
&lt;h2 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h2&gt;&lt;p&gt;大家可以自行在&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node&lt;/a&gt;的官网上进行下载.&lt;br&gt;当安装完Node之后，自然会安装NPM，即包管理器。&lt;br&gt;之后我们就可以开始安装hexo。&lt;br&gt;这里希望大家安装&lt;em&gt;git&lt;/em&gt;，并且学会使用&lt;em&gt;git&lt;/em&gt;，对以后的工作都有很大的帮助。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://wenace.github.io/tags/hexo/"/>
    
      <category term="本地搭建" scheme="http://wenace.github.io/tags/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
